naturalMergeSort(a[], l, r)
    run[] ← [l - 1];
    i ← l;
    while (i < r) do {
        if (a[i] > a[i + 1]) then {
            run[]에 i 삽입;
        }
        i ← i + 1;
    }
    run[]에 r 삽입;

    Len = run의 길이 - 1;
    n ← 1;
    while (n < Len) do {
        m ← n*2;
        while (m < Len) do {
            merge(a[], run[m - n*2] + 1, run[m - n], run[m]);
            m ← m + n*2;
        }
        if (m - n < r) then {
            merge(a[], run[m - n*2] + 1, run[m - n], r);
        }
        else {
            merge(a[], run[m - n*2], r, r)
        }
        n ← n*2;
    }
end naturalMergeSort()

naturalMergeSort(a[], l, m, r) // 처음 m자리에 run[run[0]] 넣음
    if (r > l) then {
        n ← run[0]/2;
        naturalMergeSort(a[], l, run[n], m);
        naturalMergeSort(a[], m + 1, run[n*3], r)
        merge(a[], l, m, r); 
    }

naturalMergeSort(a[], run[run[0]], l, r)
    if (r > l) then {
        run[0] ← run[0]/2;
        m ← l + run[run[0]];
        naturalMergeSort(a[], run[], l, m);
        naturalMergeSort(a[], run[], m+1, r);
        merge(a[], l, m, r); 
    }
end naturalMergeSort()

merge(a[], l, m, r])
    //i는 왼쪽, j는 오른쪽 파티션에서 우측으로 이동
    //k는 b[l:r] 생성
    i ← l; j ← m+1; k ← l;
    while (i ≤ m and j ≤ r) do { 
        if (a[i] < a[j]) then { 
            b[k] ← a[i]; 
            k ← k+1; i ← i+1; 
        } 
        else { 
            b[k] ← a[j]; 
            k ← k+1; j ← j+1; 
        } 
    }   
    if (i > m) then //왼쪽 파티션 먼저 쓰면
        for (p ← j; p ≤ r; p ← p+1) do { 
            b[k] ← a[p]; 
            k ← k+1; 
        } 
    else  //오른쪽 파티션 먼저 쓰면
        for (p ← i; p ≤ m; p ← p+1) do { 
            b[k] ← a[p]; 
            k ← k+1; 
        } 
    for (p ← l; p ≤ r; p ← p+1) do {
        a[p] ← b[p]; 
    }
end merge() 


