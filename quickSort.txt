quickSort(a[], l, r) 
   // 배열 a[]의 부분 배열 a[l : r]을 오름차순으로 정렬 
   if (r > l) then {   
     i ← partition(a[], l, r);   // i는 파티션이 끝난 뒤에 사용된 피봇의 인덱스 
     quickSort(a[], l, i-1); 
     quickSort(a[], i+1, r); 
   } 
end quickSort() 

partition(a[], l, r) 
   // 가장 오른쪽 원소 a[r]을 피봇으로 하여 a[]를 분할 
   v ← a[r];          // 가장 오른쪽 원소를 피봇으로 정함 
   i ← l-1;          // 왼쪽에서 오른쪽으로 움직이는 포인터 
   j ← r;             // 오른쪽에서 왼쪽으로 움직이는 포인터   
   for ( ; ; ) do { 
     do { i ← i+1; } while (a[i] < v); // 피봇 값보다 작으면 i 값 증가 
     do { j ← j-1; } while (a[j] > v); // 피봇 값보다 크면 j 값 감소 
     if (i ≥ j) then break;            // 왼쪽과 오른쪽 포인터가 교차하면 중지 
     a[i]와 a[j] 교환 
   } 
   a[i]와 a[r] 교환 
   return i; 
end partition() 
